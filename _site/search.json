[
  {
    "objectID": "slides/01_document_loading.html#python",
    "href": "slides/01_document_loading.html#python",
    "title": "Document Loading",
    "section": "Python",
    "text": "Python\n\nfrom langchain.document_loaders import NotionDirectoryLoader\nfrom langchain.document_loaders import WebBaseLoader\nimport pandas as pd\nfrom langchain.document_loaders.blob_loaders.youtube_audio import YoutubeAudioLoader\nfrom langchain.document_loaders.parsers import OpenAIWhisperParser\nfrom langchain.document_loaders.generic import GenericLoader\nfrom langchain.document_loaders import PyPDFLoader\nfrom dotenv import load_dotenv, find_dotenv\nimport os\nimport openai\n# import sys\n# sys.path.append('../..')\n\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']"
  },
  {
    "objectID": "slides/01_document_loading.html#basics",
    "href": "slides/01_document_loading.html#basics",
    "title": "Document Loading",
    "section": "Basics",
    "text": "Basics\n\nIn retrieval augmented generation (RAG), an LLM retrieves contextual documents from an external dataset as part of its execution.\nThis is useful if we want to ask question about specific documents (e.g., our PDFs, a set of videos, etc)."
  },
  {
    "objectID": "slides/01_document_loading.html#example",
    "href": "slides/01_document_loading.html#example",
    "title": "Document Loading",
    "section": "Example",
    "text": "Example\n\nLet‚Äôs load a PDF transcript from one of Andrew Ng‚Äôs courses\nThese documents are the result of automated transcription so words and sentences are sometimes split unexpectedly."
  },
  {
    "objectID": "slides/01_document_loading.html#load-pdf",
    "href": "slides/01_document_loading.html#load-pdf",
    "title": "Document Loading",
    "section": "Load PDF",
    "text": "Load PDF\n\nloader = PyPDFLoader(\"../docs/cs229_lectures/MachineLearning-Lecture01.pdf\")\npages = loader.load()\n\n\nEach page is a Document.\nA Document contains text (page_content) and metadata."
  },
  {
    "objectID": "slides/01_document_loading.html#inspect-data",
    "href": "slides/01_document_loading.html#inspect-data",
    "title": "Document Loading",
    "section": "Inspect data",
    "text": "Inspect data\n\nlen(pages)\n\n\n\n\n22 . . .\n\npage = pages[0]\n\n\n\npage.metadata\n\n\n\n\n\n{‚Äòsource‚Äô: ‚Äò../docs/cs229_lectures/MachineLearning-Lecture01.pdf‚Äô, ‚Äòpage‚Äô: 0}"
  },
  {
    "objectID": "slides/01_document_loading.html#inspect-content",
    "href": "slides/01_document_loading.html#inspect-content",
    "title": "Document Loading",
    "section": "Inspect content",
    "text": "Inspect content\n\nprint(page.page_content[0:500])\n\n\n\n\n\nMachineLearning-Lecture01\nInstructor (Andrew Ng): Okay. Good morning. Welcome to CS229, the machine learning class. So what I wanna do today is ju st spend a little time going over the logistics of the class, and then we‚Äôll start to talk a bit about machine learning.\nBy way of introduction, my name‚Äôs Andrew Ng and I‚Äôll be instru ctor for this class. And so I personally work in machine learning, and I‚Äô ve worked on it for about 15 years now, and I actually think that machine learning i"
  },
  {
    "objectID": "slides/01_document_loading.html#prerequisites",
    "href": "slides/01_document_loading.html#prerequisites",
    "title": "Document Loading",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nYou need FFmpeg\nMac: install with Homebrew"
  },
  {
    "objectID": "slides/01_document_loading.html#example-1",
    "href": "slides/01_document_loading.html#example-1",
    "title": "Document Loading",
    "section": "Example",
    "text": "Example\nLet‚Äôs load the ‚ÄúCode Report‚Äù about Vector databases from Fireship"
  },
  {
    "objectID": "slides/01_document_loading.html#load-youtube-video",
    "href": "slides/01_document_loading.html#load-youtube-video",
    "title": "Document Loading",
    "section": "Load YouTube video",
    "text": "Load YouTube video\n\n# link to video\nurl = \"https://www.youtube.com/watch?v=klTvEwg3oJ4\"\n\n# path to directory\nsave_dir = \"../docs/youtube/\"\n\n# load video\nloader = GenericLoader(\n    YoutubeAudioLoader([url], save_dir),\n    OpenAIWhisperParser()\n)\n\ndocs = loader.load()"
  },
  {
    "objectID": "slides/01_document_loading.html#inspect-data-1",
    "href": "slides/01_document_loading.html#inspect-data-1",
    "title": "Document Loading",
    "section": "Inspect data",
    "text": "Inspect data\n\ndocs[0].page_content[0:500]\n\n\n\n\n\n‚ÄúIt is April 7th, 2023, and you‚Äôre watching The Code Report. One month ago, Vector Database Weaviate landed $16 million in Series A funding. Last week, PineconeDB just got a check for $28 million at a $700 million valuation. And yesterday, Chroma, an open source project with only 1.2 GitHub stars, raised $18 million for its Embeddings database. And I just launched my own Vector database this morning. We‚Äôre currently pre-revenue, pre-vision, and pre-code, and valued at $420 million. Leave your cre‚Äù"
  },
  {
    "objectID": "slides/01_document_loading.html#save-as-dataframe",
    "href": "slides/01_document_loading.html#save-as-dataframe",
    "title": "Document Loading",
    "section": "Save as DataFrame",
    "text": "Save as DataFrame\n\ndf = pd.DataFrame(docs, columns=['Text', 'Metadata'])"
  },
  {
    "objectID": "slides/01_document_loading.html#save-as-csv",
    "href": "slides/01_document_loading.html#save-as-csv",
    "title": "Document Loading",
    "section": "Save as CSV",
    "text": "Save as CSV\n\ndf.to_csv('../docs/youtube/codereport.csv')"
  },
  {
    "objectID": "slides/01_document_loading.html#example-2",
    "href": "slides/01_document_loading.html#example-2",
    "title": "Document Loading",
    "section": "Example",
    "text": "Example\n\nLet‚Äôs load a page from ‚ÄúIntroduction to Modern Statistics‚Äù by Mine √áetinkaya-Rundel and Johanna Hardin: https://openintro-ims.netlify.app/data-design\nThe raw file is provided in GutHub under this URL: https://raw.githubusercontent.com/OpenIntroStat/ims/main/02-data-design.qmd"
  },
  {
    "objectID": "slides/01_document_loading.html#load-url",
    "href": "slides/01_document_loading.html#load-url",
    "title": "Document Loading",
    "section": "Load URL",
    "text": "Load URL\n\nloader = WebBaseLoader(\n    \"https://raw.githubusercontent.com/OpenIntroStat/ims/main/02-data-design.qmd\")\n\ndocs = loader.load()"
  },
  {
    "objectID": "slides/01_document_loading.html#inspact-data",
    "href": "slides/01_document_loading.html#inspact-data",
    "title": "Document Loading",
    "section": "Inspact data",
    "text": "Inspact data\n\nprint(docs[0].page_content[400:800])\n\n\n\n\n\nampling. Knowing how the observational units were selected from a larger entity will allow for generalizations back to the population from which the data were randomly selected. Additionally, by understanding the structure of the study, causal relationships can be separated from those relationships which are only associated. A good question to ask oneself before working with the data at all is, ‚ÄúH"
  },
  {
    "objectID": "slides/01_document_loading.html#save-as-dataframe-1",
    "href": "slides/01_document_loading.html#save-as-dataframe-1",
    "title": "Document Loading",
    "section": "Save as DataFrame",
    "text": "Save as DataFrame\n\ndf = pd.DataFrame(docs, columns=['Text', 'Metadata'])"
  },
  {
    "objectID": "slides/01_document_loading.html#save-as-csv-1",
    "href": "slides/01_document_loading.html#save-as-csv-1",
    "title": "Document Loading",
    "section": "Save as CSV",
    "text": "Save as CSV\n\ndf.to_csv('../docs/url/study-design.csv')"
  },
  {
    "objectID": "slides/01_document_loading.html#example-3",
    "href": "slides/01_document_loading.html#example-3",
    "title": "Document Loading",
    "section": "Example",
    "text": "Example\n\nFollow the steps here for an example Notion site such as this one:\nDuplicate the page into your own Notion space and export as Markdown / CSV.\nUnzip it and save it as a folder that contains the markdown file for the Notion page."
  },
  {
    "objectID": "slides/01_document_loading.html#load-notion",
    "href": "slides/01_document_loading.html#load-notion",
    "title": "Document Loading",
    "section": "Load Notion",
    "text": "Load Notion\n\nloader = NotionDirectoryLoader(\"../docs/Notion_DB\")\ndocs = loader.load()"
  },
  {
    "objectID": "slides/01_document_loading.html#inspect-data-2",
    "href": "slides/01_document_loading.html#inspect-data-2",
    "title": "Document Loading",
    "section": "Inspect data",
    "text": "Inspect data\n\nprint(docs[0].page_content[0:200])\n\n\n\n\n# Getting Started\n\nüëã Welcome to Notion!\n\nHere are the basics:\n\n- [ ]  Click anywhere and just start typing\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc."
  },
  {
    "objectID": "slides/01_document_loading.html#inspect-data-3",
    "href": "slides/01_document_loading.html#inspect-data-3",
    "title": "Document Loading",
    "section": "Inspect data",
    "text": "Inspect data\n\ndocs[0].metadata\n\n\n\n\n\n{‚Äòsource‚Äô: ‚Äò../docs/Notion_DB/Getting Started 95e5ecbe48c44e408ef09fed850fbd40.md‚Äô}"
  },
  {
    "objectID": "slides/02_document_splitting.html",
    "href": "slides/02_document_splitting.html",
    "title": "Document Splitting",
    "section": "",
    "text": "import os\nimport openai\nimport sys\nsys.path.append('../..')\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) # read local .env file\n\nopenai.api_key  = os.environ['OPENAI_API_KEY']\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter\nchunk_size =26\nchunk_overlap = 4\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap\n)\nc_splitter = CharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap\n)\nWhy doesn‚Äôt this split the string below?\ntext1 = 'abcdefghijklmnopqrstuvwxyz'\nr_splitter.split_text(text1)\n\n['abcdefghijklmnopqrstuvwxyz']\ntext2 = 'abcdefghijklmnopqrstuvwxyzabcdefg'\nr_splitter.split_text(text2)\n\n['abcdefghijklmnopqrstuvwxyz', 'wxyzabcdefg']\nOk, this splits the string but we have an overlap specified as 5, but it looks like 3? (try an even number)\ntext3 = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\nr_splitter.split_text(text3)\n\n['a b c d e f g h i j k l m', 'l m n o p q r s t u v w x', 'w x y z']\nc_splitter.split_text(text3)\n\n['a b c d e f g h i j k l m n o p q r s t u v w x y z']\nc_splitter = CharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap,\n    separator = ' '\n)\nc_splitter.split_text(text3)\n\n['a b c d e f g h i j k l m', 'l m n o p q r s t u v w x', 'w x y z']\nTry your own examples!"
  },
  {
    "objectID": "slides/02_document_splitting.html#recursive-splitting-details",
    "href": "slides/02_document_splitting.html#recursive-splitting-details",
    "title": "Document Splitting",
    "section": "Recursive splitting details",
    "text": "Recursive splitting details\nRecursiveCharacterTextSplitter is recommended for generic text.\n\nsome_text = \"\"\"When writing documents, writers will use document structure to group content. \\\nThis can convey to the reader, which idea's are related. For example, closely related ideas \\\nare in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \\n\\n  \\\nParagraphs are often delimited with a carriage return or two carriage returns. \\\nCarriage returns are the \"backslash n\" you see embedded in this string. \\\nSentences have a period at the end, but also, have a space.\\\nand words are separated by space.\"\"\"\n\n\nlen(some_text)\n\n\nc_splitter = CharacterTextSplitter(\n    chunk_size=450,\n    chunk_overlap=0,\n    separator = ' '\n)\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=450,\n    chunk_overlap=0, \n    separators=[\"\\n\\n\", \"\\n\", \" \", \"\"]\n)\n\n\nc_splitter.split_text(some_text)\n\n['When writing documents, writers will use document structure to group content. This can convey to the reader, which idea\\'s are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \\n\\n Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the \"backslash n\" you see embedded in this string. Sentences have a period at the end, but also,',\n 'have a space.and words are separated by space.']\n\n\n\nr_splitter.split_text(some_text)\n\n[\"When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.\",\n 'Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the \"backslash n\" you see embedded in this string. Sentences have a period at the end, but also, have a space.and words are separated by space.']\n\n\nLet‚Äôs reduce the chunk size a bit and add a period to our separators:\n\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=150,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \"\\. \", \" \", \"\"]\n)\nr_splitter.split_text(some_text)\n\n[\"When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related\",\n '. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.',\n 'Paragraphs are often delimited with a carriage return or two carriage returns',\n '. Carriage returns are the \"backslash n\" you see embedded in this string',\n '. Sentences have a period at the end, but also, have a space.and words are separated by space.']\n\n\n\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=150,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \"(?&lt;=\\. )\", \" \", \"\"]\n)\nr_splitter.split_text(some_text)\n\n[\"When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related.\",\n 'For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.',\n 'Paragraphs are often delimited with a carriage return or two carriage returns.',\n 'Carriage returns are the \"backslash n\" you see embedded in this string.',\n 'Sentences have a period at the end, but also, have a space.and words are separated by space.']\n\n\n\nfrom langchain.document_loaders import PyPDFLoader\nloader = PyPDFLoader(\"docs/cs229_lectures/MachineLearning-Lecture01.pdf\")\npages = loader.load()\n\n\nfrom langchain.text_splitter import CharacterTextSplitter\ntext_splitter = CharacterTextSplitter(\n    separator=\"\\n\",\n    chunk_size=1000,\n    chunk_overlap=150,\n    length_function=len\n)\n\n\ndocs = text_splitter.split_documents(pages)\n\n\nlen(docs)\n\n77\n\n\n\nlen(pages)\n\n22\n\n\n\nfrom langchain.document_loaders import NotionDirectoryLoader\nloader = NotionDirectoryLoader(\"docs/Notion_DB\")\nnotion_db = loader.load()\n\n\ndocs = text_splitter.split_documents(notion_db)\n\n\nlen(notion_db)\n\n1\n\n\n\nlen(docs)\n\n2"
  },
  {
    "objectID": "slides/02_document_splitting.html#token-splitting",
    "href": "slides/02_document_splitting.html#token-splitting",
    "title": "Document Splitting",
    "section": "Token splitting",
    "text": "Token splitting\nWe can also split on token count explicity, if we want.\nThis can be useful because LLMs often have context windows designated in tokens.\nTokens are often ~4 characters.\n\nfrom langchain.text_splitter import TokenTextSplitter\n\n\ntext_splitter = TokenTextSplitter(chunk_size=1, chunk_overlap=0)\n\n\ntext1 = \"foo bar bazzyfoo\"\n\n\ntext_splitter.split_text(text1)\n\n['foo', ' bar', ' b', 'az', 'zy', 'foo']\n\n\n\ntext_splitter = TokenTextSplitter(chunk_size=10, chunk_overlap=0)\n\n\ndocs = text_splitter.split_documents(pages)\n\n\ndocs[0]\n\nDocument(page_content='MachineLearning-Lecture01  \\n', metadata={'source': 'docs/cs229_lectures/MachineLearning-Lecture01.pdf', 'page': 0})\n\n\n\npages[0].metadata\n\n{'source': 'docs/cs229_lectures/MachineLearning-Lecture01.pdf', 'page': 0}"
  },
  {
    "objectID": "slides/02_document_splitting.html#context-aware-splitting",
    "href": "slides/02_document_splitting.html#context-aware-splitting",
    "title": "Document Splitting",
    "section": "Context aware splitting",
    "text": "Context aware splitting\nChunking aims to keep text with common context together.\nA text splitting often uses sentences or other delimiters to keep related text together but many documents (such as Markdown) have structure (headers) that can be explicitly used in splitting.\nWe can use MarkdownHeaderTextSplitter to preserve header metadata in our chunks, as show below.\n\nfrom langchain.document_loaders import NotionDirectoryLoader\nfrom langchain.text_splitter import MarkdownHeaderTextSplitter\n\n\nmarkdown_document = \"\"\"# Title\\n\\n \\\n## Chapter 1\\n\\n \\\nHi this is Jim\\n\\n Hi this is Joe\\n\\n \\\n### Section \\n\\n \\\nHi this is Lance \\n\\n \n## Chapter 2\\n\\n \\\nHi this is Molly\"\"\"\n\n\n\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n    (\"##\", \"Header 2\"),\n    (\"###\", \"Header 3\"),\n]\n\n\nmarkdown_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on\n)\nmd_header_splits = markdown_splitter.split_text(markdown_document)\n\n\nmd_header_splits[0]\n\nDocument(page_content='Hi this is Jim  \\nHi this is Joe', metadata={'Header 1': 'Title', 'Header 2': 'Chapter 1'})\n\n\n\nmd_header_splits[1]\n\nDocument(page_content='Hi this is Lance', metadata={'Header 1': 'Title', 'Header 2': 'Chapter 1', 'Header 3': 'Section'})\n\n\nTry on a real Markdown file, like a Notion database.\n\nloader = NotionDirectoryLoader(\"docs/Notion_DB\")\ndocs = loader.load()\ntxt = ' '.join([d.page_content for d in docs])\n\n\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n    (\"##\", \"Header 2\"),\n]\nmarkdown_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on\n)\n\n\nmd_header_splits = markdown_splitter.split_text(txt)\n\n\nmd_header_splits[0]\n\nDocument(page_content='üëã Welcome to Notion!  \\nHere are the basics:  \\n- [ ]  Click anywhere and just start typing\\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.  \\n[Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)  \\n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\\n- [ ]  See the `‚ãÆ‚ãÆ` to the left of this checkbox on hover? Click and drag to move this line\\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\\n- This is a toggle block. Click the little triangle to see more useful tips!\\n- [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community\\n- [Help & Support](https://www.notion.so/e040febf70a94950b8620e6f00005004?pvs=21): ****Guides and FAQs for everything in Notion\\n- Stay organized with your sidebar and nested pages:  \\n![Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif](Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif)  \\nSee it in action:  \\n[1 minute](https://youtu.be/TL_N2pmh9O0)  \\n1 minute  \\n[4 minutes](https://youtu.be/FXIrojSK3Jo)  \\n4 minutes  \\n[2 minutes](https://youtu.be/2Pwzff-uffU)  \\n2 minutes  \\n[2 minutes](https://youtu.be/O8qdvSxDYNY)  \\n2 minutes  \\nVisit our [YouTube channel](http://youtube.com/c/notion) to watch 50+ more tutorials  \\nüëâ**Have a question?** Click the `?` at the bottom right for more guides, or to send us a message.', metadata={'Header 1': 'Getting Started'})"
  },
  {
    "objectID": "slides/02_document_splitting.html#python",
    "href": "slides/02_document_splitting.html#python",
    "title": "Document Splitting",
    "section": "Python",
    "text": "Python\n\nfrom langchain.text_splitter import MarkdownHeaderTextSplitter\nfrom langchain.text_splitter import TokenTextSplitter\nfrom langchain.document_loaders import NotionDirectoryLoader\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.document_loaders import PyPDFLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter\nfrom dotenv import load_dotenv, find_dotenv\nimport os\nimport openai\n# import sys\n# sys.path.append('../..')\n\n_ = load_dotenv(find_dotenv())  # read local .env file\n\nopenai.api_key = os.environ['OPENAI_API_KEY']"
  },
  {
    "objectID": "slides/02_document_splitting.html#character-text-splitter",
    "href": "slides/02_document_splitting.html#character-text-splitter",
    "title": "Document Splitting",
    "section": "Character Text Splitter",
    "text": "Character Text Splitter\n\nchunk_size =26\nchunk_overlap = 4\n\n\n\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap\n)\n\n\n\n\nc_splitter = CharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap\n)"
  },
  {
    "objectID": "slides/02_document_splitting.html#text-1",
    "href": "slides/02_document_splitting.html#text-1",
    "title": "Document Splitting",
    "section": "Text 1",
    "text": "Text 1\n\nWhy doesn‚Äôt this split the string below?\n\n\ntext1 = 'abcdefghijklmnopqrstuvwxyz'\n\n\n\nr_splitter.split_text(text1)\n\n\n\n\n\n[‚Äòabcdefghijklmnopqrstuvwxyz‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#text-2",
    "href": "slides/02_document_splitting.html#text-2",
    "title": "Document Splitting",
    "section": "Text 2",
    "text": "Text 2\n\ntext2 = 'abcdefghijklmnopqrstuvwxyzabcdefg'\n\n\n\nr_splitter.split_text(text2)\n\n\n\n\n\n[‚Äòabcdefghijklmnopqrstuvwxyz‚Äô, ‚Äòwxyzabcdefg‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#text-3",
    "href": "slides/02_document_splitting.html#text-3",
    "title": "Document Splitting",
    "section": "Text 3",
    "text": "Text 3\n\ntext3 = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n\n\n\nr_splitter.split_text(text3)\n\n\n\n\n\n[‚Äòa b c d e f g h i j k l m‚Äô, ‚Äòl m n o p q r s t u v w x‚Äô, ‚Äòw x y z‚Äô]\n\n\n\n\nc_splitter.split_text(text3)\n\n\n\n\n\n[‚Äòa b c d e f g h i j k l m n o p q r s t u v w x y z‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#charactertextsplitter",
    "href": "slides/02_document_splitting.html#charactertextsplitter",
    "title": "Document Splitting",
    "section": "CharacterTextSplitter",
    "text": "CharacterTextSplitter\n\nc_splitter = CharacterTextSplitter(\n    chunk_size=chunk_size,\n    chunk_overlap=chunk_overlap,\n    separator=' '\n)\n\n\nc_splitter.split_text(text3)\n\n\n\n\n\n[‚Äòa b c d e f g h i j k l m‚Äô, ‚Äòl m n o p q r s t u v w x‚Äô, ‚Äòw x y z‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#recursivecharactertextsplitter",
    "href": "slides/02_document_splitting.html#recursivecharactertextsplitter",
    "title": "Document Splitting",
    "section": "RecursiveCharacterTextSplitter",
    "text": "RecursiveCharacterTextSplitter\n\nRecursiveCharacterTextSplitter is recommended for generic text.\n\n\nsome_text = \"\"\"When writing documents, writers will use document structure to group content. \\\nThis can convey to the reader, which idea's are related. For example, closely related ideas \\\nare in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \\n\\n  \\\nParagraphs are often delimited with a carriage return or two carriage returns. \\\nCarriage returns are the \"backslash n\" you see embedded in this string. \\\nSentences have a period at the end, but also, have a space.\\\nand words are separated by space.\"\"\""
  },
  {
    "objectID": "slides/02_document_splitting.html#define-splitter",
    "href": "slides/02_document_splitting.html#define-splitter",
    "title": "Document Splitting",
    "section": "Define splitter",
    "text": "Define splitter\n\nc_splitter = CharacterTextSplitter(\n    chunk_size=450,\n    chunk_overlap=0,\n    separator=' '\n)\n\n\n\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=450,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \" \", \"\"]\n)"
  },
  {
    "objectID": "slides/02_document_splitting.html#character-splitter-output",
    "href": "slides/02_document_splitting.html#character-splitter-output",
    "title": "Document Splitting",
    "section": "Character Splitter output",
    "text": "Character Splitter output\n\nc_splitter.split_text(some_text)\n\n\n\n\n\n[‚ÄòWhen writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document. Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the ‚Äúbackslash n‚Äù you see embedded in this string. Sentences have a period at the end, but also,‚Äô, ‚Äòhave a space.and words are separated by space.‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#recursive-splitter-output",
    "href": "slides/02_document_splitting.html#recursive-splitter-output",
    "title": "Document Splitting",
    "section": "Recursive Splitter output",
    "text": "Recursive Splitter output\n\nr_splitter.split_text(some_text)\n\n\n\n\n\n[‚ÄúWhen writing documents, writers will use document structure to group content. This can convey to the reader, which idea‚Äôs are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.‚Äù, ‚ÄòParagraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the ‚Äúbackslash n‚Äù you see embedded in this string. Sentences have a period at the end, but also, have a space.and words are separated by space.‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#adapt-splitter-1",
    "href": "slides/02_document_splitting.html#adapt-splitter-1",
    "title": "Document Splitting",
    "section": "Adapt splitter 1",
    "text": "Adapt splitter 1\n\nLet‚Äôs reduce the chunk size a bit and add a period to our separators:\n\n\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=150,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \"\\. \", \" \", \"\"]\n)\n\n\n\nr_splitter.split_text(some_text)\n\n\n\n\n\n[‚ÄúWhen writing documents, writers will use document structure to group content. This can convey to the reader, which idea‚Äôs are related‚Äù, ‚Äò. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.‚Äô, ‚ÄòParagraphs are often delimited with a carriage return or two carriage returns‚Äô, ‚Äò. Carriage returns are the ‚Äúbackslash n‚Äù you see embedded in this string‚Äô, ‚Äò. Sentences have a period at the end, but also, have a space.and words are separated by space.‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#adapt-splitter-2",
    "href": "slides/02_document_splitting.html#adapt-splitter-2",
    "title": "Document Splitting",
    "section": "Adapt splitter 2",
    "text": "Adapt splitter 2\n\nr_splitter = RecursiveCharacterTextSplitter(\n    chunk_size=150,\n    chunk_overlap=0,\n    separators=[\"\\n\\n\", \"\\n\", \"(?&lt;=\\. )\", \" \", \"\"]\n)\nr_splitter.split_text(some_text)\n\n\n\nr_splitter.split_text(some_text)\n\n\n\n\n\n[‚ÄúWhen writing documents, writers will use document structure to group content. This can convey to the reader, which idea‚Äôs are related.‚Äù, ‚ÄòFor example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.‚Äô, ‚ÄòParagraphs are often delimited with a carriage return or two carriage returns.‚Äô, ‚ÄòCarriage returns are the ‚Äúbackslash n‚Äù you see embedded in this string.‚Äô, ‚ÄòSentences have a period at the end, but also, have a space.and words are separated by space.‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#load-pdf",
    "href": "slides/02_document_splitting.html#load-pdf",
    "title": "Document Splitting",
    "section": "Load PDF",
    "text": "Load PDF\n\nloader = PyPDFLoader(\"../docs/cs229_lectures/MachineLearning-Lecture01.pdf\")\npages = loader.load()"
  },
  {
    "objectID": "slides/02_document_splitting.html#define-splitter-1",
    "href": "slides/02_document_splitting.html#define-splitter-1",
    "title": "Document Splitting",
    "section": "Define splitter",
    "text": "Define splitter\n\ntext_splitter = CharacterTextSplitter(\n    separator=\"\\n\",\n    chunk_size=1000,\n    chunk_overlap=150,\n    length_function=len\n)"
  },
  {
    "objectID": "slides/02_document_splitting.html#split-document",
    "href": "slides/02_document_splitting.html#split-document",
    "title": "Document Splitting",
    "section": "Split document",
    "text": "Split document\n\ndocs = text_splitter.split_documents(pages)"
  },
  {
    "objectID": "slides/02_document_splitting.html#inspect-data",
    "href": "slides/02_document_splitting.html#inspect-data",
    "title": "Document Splitting",
    "section": "Inspect data",
    "text": "Inspect data\n\nlen(docs)\n\n\n\n\n\n77 . . .\n\n\nlen(pages)\n\n\n\n\n\n22"
  },
  {
    "objectID": "slides/02_document_splitting.html#inspect-data-1",
    "href": "slides/02_document_splitting.html#inspect-data-1",
    "title": "Document Splitting",
    "section": "Inspect data",
    "text": "Inspect data\n\nprint(docs[0].page_content[300:800])\n\n\nmy name‚Äôs Andrew Ng and I‚Äôll be instru ctor for this class. And so I personally work in machine learning, and I‚Äô ve worked on it for about 15 years now, and I actually think that machine learning is th e most exciting field of all the computer sciences. So I‚Äôm actually always excited about teaching this class. Sometimes I actually think that machine learning is not only the most exciting thin g in computer science, but the most exciting thing in all of human e ndeavor, so maybe a little b"
  },
  {
    "objectID": "slides/02_document_splitting.html#load-data",
    "href": "slides/02_document_splitting.html#load-data",
    "title": "Document Splitting",
    "section": "Load data",
    "text": "Load data\n\nloader = NotionDirectoryLoader(\"../docs/Notion_DB\")\nnotion_db = loader.load()"
  },
  {
    "objectID": "slides/02_document_splitting.html#define-splitter-2",
    "href": "slides/02_document_splitting.html#define-splitter-2",
    "title": "Document Splitting",
    "section": "Define splitter",
    "text": "Define splitter\n\ntext_splitter = CharacterTextSplitter(\n    separator=\"\\n\",\n    chunk_size=1000,\n    chunk_overlap=150,\n    length_function=len\n)"
  },
  {
    "objectID": "slides/02_document_splitting.html#split-document-1",
    "href": "slides/02_document_splitting.html#split-document-1",
    "title": "Document Splitting",
    "section": "Split document",
    "text": "Split document\n\ndocs = text_splitter.split_documents(notion_db)"
  },
  {
    "objectID": "slides/02_document_splitting.html#inspect-data-2",
    "href": "slides/02_document_splitting.html#inspect-data-2",
    "title": "Document Splitting",
    "section": "Inspect data",
    "text": "Inspect data\n\nlen(notion_db)\n\n\n\n\n\n1 . . .\n\n\nlen(docs)\n\n\n\n\n\n2"
  },
  {
    "objectID": "slides/02_document_splitting.html#inspect-data-smaller",
    "href": "slides/02_document_splitting.html#inspect-data-smaller",
    "title": "Document Splitting",
    "section": "Inspect data {smaller}",
    "text": "Inspect data {smaller}\n\nprint(docs[0].page_content)\n\n# Getting Started\nüëã Welcome to Notion!\nHere are the basics:\n- [ ]  Click anywhere and just start typing\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.\n    \n    [Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)\n    \n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\n- [ ]  See the `‚ãÆ‚ãÆ` to the left of this checkbox on hover? Click and drag to move this line\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\n- This is a toggle block. Click the little triangle to see more useful tips!\n    - [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community"
  },
  {
    "objectID": "slides/02_document_splitting.html#basics",
    "href": "slides/02_document_splitting.html#basics",
    "title": "Document Splitting",
    "section": "Basics",
    "text": "Basics\n\nWe can also split on token count explicity, if we want\nThis can be useful because LLMs often have context windows designated in tokens\nTokens are often ~4 characters."
  },
  {
    "objectID": "slides/02_document_splitting.html#tokentextsplitter-1",
    "href": "slides/02_document_splitting.html#tokentextsplitter-1",
    "title": "Document Splitting",
    "section": "TokenTextSplitter 1",
    "text": "TokenTextSplitter 1\n\ntext_splitter = TokenTextSplitter(chunk_size=1, chunk_overlap=0)"
  },
  {
    "objectID": "slides/02_document_splitting.html#split-text",
    "href": "slides/02_document_splitting.html#split-text",
    "title": "Document Splitting",
    "section": "Split text",
    "text": "Split text\n\ntext1 = \"foo bar bazzyfoo\"\n\n\n\ntext_splitter.split_text(text1)\n\n\n\n\n\n[‚Äòfoo‚Äô, ‚Äô bar‚Äô, ‚Äô b‚Äô, ‚Äòaz‚Äô, ‚Äòzy‚Äô, ‚Äòfoo‚Äô]"
  },
  {
    "objectID": "slides/02_document_splitting.html#tokentextsplitter-2",
    "href": "slides/02_document_splitting.html#tokentextsplitter-2",
    "title": "Document Splitting",
    "section": "TokenTextSplitter 2",
    "text": "TokenTextSplitter 2\n\ntext_splitter = TokenTextSplitter(chunk_size=10, chunk_overlap=0)"
  },
  {
    "objectID": "slides/02_document_splitting.html#split-text-1",
    "href": "slides/02_document_splitting.html#split-text-1",
    "title": "Document Splitting",
    "section": "Split text",
    "text": "Split text\n\ndocs = text_splitter.split_documents(pages)\n\n\ndocs[0]\n\n\n\n\n\nDocument(page_content=‚ÄòMachineLearning-Lecture01 ‚Äô, metadata={‚Äòsource‚Äô: ‚Äò../docs/cs229_lectures/MachineLearning-Lecture01.pdf‚Äô, ‚Äòpage‚Äô: 0})\n\n\n\npages[0].metadata\n\n\n\n\n\n{‚Äòsource‚Äô: ‚Äò../docs/cs229_lectures/MachineLearning-Lecture01.pdf‚Äô, ‚Äòpage‚Äô: 0}"
  },
  {
    "objectID": "slides/02_document_splitting.html#basics-1",
    "href": "slides/02_document_splitting.html#basics-1",
    "title": "Document Splitting",
    "section": "Basics",
    "text": "Basics\n\nChunking aims to keep text with common context together.\nA text splitting often uses sentences or other delimiters to keep related text together but many documents (such as Markdown) have structure (headers) that can be explicitly used in splitting.\nWe can use MarkdownHeaderTextSplitter to preserve header metadata in our chunks"
  },
  {
    "objectID": "slides/02_document_splitting.html#markdown-example",
    "href": "slides/02_document_splitting.html#markdown-example",
    "title": "Document Splitting",
    "section": "Markdown example",
    "text": "Markdown example\n\nmarkdown_document = \"\"\"# Title\\n\\n \\\n## Chapter 1\\n\\n \\\nHi this is Jim\\n\\n Hi this is Joe\\n\\n \\\n### Section \\n\\n \\\nHi this is Lance \\n\\n \n## Chapter 2\\n\\n \\\nHi this is Molly\"\"\""
  },
  {
    "objectID": "slides/02_document_splitting.html#headers-to-split-on",
    "href": "slides/02_document_splitting.html#headers-to-split-on",
    "title": "Document Splitting",
    "section": "Headers to split on",
    "text": "Headers to split on\n\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n    (\"##\", \"Header 2\"),\n    (\"###\", \"Header 3\"),\n]"
  },
  {
    "objectID": "slides/02_document_splitting.html#markdownheadertextsplitter",
    "href": "slides/02_document_splitting.html#markdownheadertextsplitter",
    "title": "Document Splitting",
    "section": "MarkdownHeaderTextSplitter",
    "text": "MarkdownHeaderTextSplitter\n\nmarkdown_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on\n)"
  },
  {
    "objectID": "slides/02_document_splitting.html#split-text-2",
    "href": "slides/02_document_splitting.html#split-text-2",
    "title": "Document Splitting",
    "section": "Split text",
    "text": "Split text\n\nmd_header_splits = markdown_splitter.split_text(markdown_document)\n\n\n\nmd_header_splits[0]\n\n\n\n\n\nDocument(page_content=‚ÄòHi this is Jim this is Joe‚Äô, metadata={‚ÄòHeader 1‚Äô: ‚ÄòTitle‚Äô, ‚ÄòHeader 2‚Äô: ‚ÄòChapter 1‚Äô})\n\n\nmd_header_splits[1]\n\n\n\n\n\nDocument(page_content=‚ÄòHi this is Lance‚Äô, metadata={‚ÄòHeader 1‚Äô: ‚ÄòTitle‚Äô, ‚ÄòHeader 2‚Äô: ‚ÄòChapter 1‚Äô, ‚ÄòHeader 3‚Äô: ‚ÄòSection‚Äô})"
  },
  {
    "objectID": "slides/02_document_splitting.html#splitting-notion-markdown",
    "href": "slides/02_document_splitting.html#splitting-notion-markdown",
    "title": "Document Splitting",
    "section": "Splitting Notion Markdown",
    "text": "Splitting Notion Markdown"
  },
  {
    "objectID": "slides/02_document_splitting.html#load-data-1",
    "href": "slides/02_document_splitting.html#load-data-1",
    "title": "Document Splitting",
    "section": "Load data",
    "text": "Load data\n\nloader = NotionDirectoryLoader(\"../docs/Notion_DB\")\ndocs = loader.load()"
  },
  {
    "objectID": "slides/02_document_splitting.html#join-data",
    "href": "slides/02_document_splitting.html#join-data",
    "title": "Document Splitting",
    "section": "Join data",
    "text": "Join data\n\ntxt = ' '.join([d.page_content for d in docs])\ntxt\n\n\n\n\n\n‚Äò# Getting Startedüëã Welcome to Notion!are the basics:- [ ] Click anywhere and just start typing- [ ] Hit / to see all the types of content you can add - headers, videos, sub pages, etc.(https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)- [ ] Highlight any text, and use the menu that pops up to style your writing however you like- [ ] See the ‚ãÆ‚ãÆ to the left of this checkbox on hover? Click and drag to move this line- [ ] Click the + New Page button at the bottom of your sidebar to add a new page- [ ] Click Templates in your sidebar to get started with pre-built pages- This is a toggle block. Click the little triangle to see more useful tips!- Template Gallery: More templates built by the Notion community- Help & Support: ****Guides and FAQs for everything in Notion- Stay organized with your sidebar and nested pages:it in action:(https://youtu.be/TL_N2pmh9O0) minute(https://youtu.be/FXIrojSK3Jo) minutes(https://youtu.be/2Pwzff-uffU) minutes(https://youtu.be/O8qdvSxDYNY) minutesour YouTube channel to watch 50+ more tutorialsüëâHave a question? Click the ? at the bottom right for more guides, or to send us a message.‚Äô"
  },
  {
    "objectID": "slides/02_document_splitting.html#define-splitter-3",
    "href": "slides/02_document_splitting.html#define-splitter-3",
    "title": "Document Splitting",
    "section": "Define Splitter",
    "text": "Define Splitter\n\nheaders_to_split_on = [\n    (\"#\", \"Header 1\"),\n    (\"##\", \"Header 2\"),\n]\n\n\n\nmarkdown_splitter = MarkdownHeaderTextSplitter(\n    headers_to_split_on=headers_to_split_on\n)"
  },
  {
    "objectID": "slides/02_document_splitting.html#split-text-3",
    "href": "slides/02_document_splitting.html#split-text-3",
    "title": "Document Splitting",
    "section": "Split text",
    "text": "Split text\n\nmd_header_splits = markdown_splitter.split_text(txt)"
  },
  {
    "objectID": "slides/02_document_splitting.html#output",
    "href": "slides/02_document_splitting.html#output",
    "title": "Document Splitting",
    "section": "Output",
    "text": "Output\n\nmd_header_splits[0]\n\n\n\n\n\nDocument(page_content=‚Äòüëã Welcome to Notion! are the basics: - [ ] Click anywhere and just start typing- [ ] Hit / to see all the types of content you can add - headers, videos, sub pages, etc. (https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21) - [ ] Highlight any text, and use the menu that pops up to style your writing however you like- [ ] See the ‚ãÆ‚ãÆ to the left of this checkbox on hover? Click and drag to move this line- [ ] Click the + New Page button at the bottom of your sidebar to add a new page- [ ] Click Templates in your sidebar to get started with pre-built pages- This is a toggle block. Click the little triangle to see more useful tips!- Template Gallery: More templates built by the Notion community- Help & Support: ****Guides and FAQs for everything in Notion- Stay organized with your sidebar and nested pages:  it in action: (https://youtu.be/TL_N2pmh9O0) minute (https://youtu.be/FXIrojSK3Jo) minutes (https://youtu.be/2Pwzff-uffU) minutes (https://youtu.be/O8qdvSxDYNY) minutes our YouTube channel to watch 50+ more tutorials üëâHave a question? Click the ? at the bottom right for more guides, or to send us a message.‚Äô, metadata={‚ÄòHeader 1‚Äô: ‚ÄòGetting Started‚Äô})\n\n\n\nJan Kirenz"
  }
]