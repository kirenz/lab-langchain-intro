---
title: Document Splitting
title-slide-attributes:
  data-background-image: ../images/logo.png
  data-background-size: contain
  data-background-opacity: "0.5"
lang: en
subtitle: LangChain Tutorial 2
author: Jan Kirenz
execute:
  eval: false
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   # logo: ../images/logo.png
    footer: Jan Kirenz
---

# Document Splitting

Discover the best practices and considerations for splitting data.

# Setup

## Python

```{python}

from langchain.text_splitter import MarkdownHeaderTextSplitter
from langchain.text_splitter import TokenTextSplitter
from langchain.document_loaders import NotionDirectoryLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter, CharacterTextSplitter
from dotenv import load_dotenv, find_dotenv
import os
import openai
# import sys
# sys.path.append('../..')

_ = load_dotenv(find_dotenv())  # read local .env file

openai.api_key = os.environ['OPENAI_API_KEY']
```

# Splitting

## Character Text Splitter

```{python}
chunk_size = 26
chunk_overlap = 4
```

. . .

```{python}
r_splitter = RecursiveCharacterTextSplitter(
    chunk_size=chunk_size,
    chunk_overlap=chunk_overlap
)
```

. . .

```{python}
c_splitter = CharacterTextSplitter(
    chunk_size=chunk_size,
    chunk_overlap=chunk_overlap
)
```

## Text 1

- Why doesn't this split the string below?

```{python}
text1 = 'abcdefghijklmnopqrstuvwxyz'
```

. . .

```{python}

r_splitter.split_text(text1)
```

- ['abcdefghijklmnopqrstuvwxyz']

## Text 2

```{python}
text2 = 'abcdefghijklmnopqrstuvwxyzabcdefg'
```

. . .

```{python}

r_splitter.split_text(text2)
```

- ['abcdefghijklmnopqrstuvwxyz', 'wxyzabcdefg']


## Text 3

```{python}
text3 = "a b c d e f g h i j k l m n o p q r s t u v w x y z"
```

. . .

```{python}

r_splitter.split_text(text3)
```

- ['a b c d e f g h i j k l m', 'l m n o p q r s t u v w x', 'w x y z']

. . .


```{python}

c_splitter.split_text(text3)
```

- ['a b c d e f g h i j k l m n o p q r s t u v w x y z']

## CharacterTextSplitter

```{python}
c_splitter = CharacterTextSplitter(
    chunk_size=chunk_size,
    chunk_overlap=chunk_overlap,
    separator=' '
)
```

```{python}


c_splitter.split_text(text3)
```


- ['a b c d e f g h i j k l m', 'l m n o p q r s t u v w x', 'w x y z']

# Recursive Splitting Details

## RecursiveCharacterTextSplitter {.smaller}

- `RecursiveCharacterTextSplitter` is recommended for generic text. 

```{python}
some_text = """When writing documents, writers will use document structure to group content. \
This can convey to the reader, which idea's are related. For example, closely related ideas \
are in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \n\n  \
Paragraphs are often delimited with a carriage return or two carriage returns. \
Carriage returns are the "backslash n" you see embedded in this string. \
Sentences have a period at the end, but also, have a space.\
and words are separated by space."""
```

## Define splitter

```{python}

c_splitter = CharacterTextSplitter(
    chunk_size=450,
    chunk_overlap=0,
    separator=' '
)
```

. . .

```{python}
r_splitter = RecursiveCharacterTextSplitter(
    chunk_size=450,
    chunk_overlap=0,
    separators=["\n\n", "\n", " ", ""]
)
```


## Character Splitter output

```{python}

c_splitter.split_text(some_text)
```

- ['When writing documents, writers will use document structure to group content. This can convey to the reader, which idea\'s are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document. \n\n Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the "backslash n" you see embedded in this string. Sentences have a period at the end, but also,',
 'have a space.and words are separated by space.']

## Recursive Splitter output


```{python}

r_splitter.split_text(some_text)
```

- ["When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.",
 'Paragraphs are often delimited with a carriage return or two carriage returns. Carriage returns are the "backslash n" you see embedded in this string. Sentences have a period at the end, but also, have a space.and words are separated by space.']

## Adapt splitter 1 {.smaller}

- Let's reduce the chunk size a bit and add a period to our separators:

```{python}

r_splitter = RecursiveCharacterTextSplitter(
    chunk_size=150,
    chunk_overlap=0,
    separators=["\n\n", "\n", "\. ", " ", ""]
)
```

. . .

```{python}

r_splitter.split_text(some_text)
```

- ["When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related",
 '. For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.',
 'Paragraphs are often delimited with a carriage return or two carriage returns',
 '. Carriage returns are the "backslash n" you see embedded in this string',
 '. Sentences have a period at the end, but also, have a space.and words are separated by space.']

## Adapt splitter 2 {.smaller}

```{python}
r_splitter = RecursiveCharacterTextSplitter(
    chunk_size=150,
    chunk_overlap=0,
    separators=["\n\n", "\n", "(?<=\. )", " ", ""]
)
r_splitter.split_text(some_text)
```

. . .

```{python}

r_splitter.split_text(some_text)
```

- ["When writing documents, writers will use document structure to group content. This can convey to the reader, which idea's are related.",
 'For example, closely related ideas are in sentances. Similar ideas are in paragraphs. Paragraphs form a document.',
 'Paragraphs are often delimited with a carriage return or two carriage returns.',
 'Carriage returns are the "backslash n" you see embedded in this string.',
 'Sentences have a period at the end, but also, have a space.and words are separated by space.']

# Split a Document

## Load PDF

```{python}
loader = PyPDFLoader("../docs/cs229_lectures/MachineLearning-Lecture01.pdf")
pages = loader.load()
```

## Define splitter

```{python}
text_splitter = CharacterTextSplitter(
    separator="\n",
    chunk_size=1000,
    chunk_overlap=150,
    length_function=len
)
```


## Split document

```{python}
docs = text_splitter.split_documents(pages)
```

## Inspect data

```{python}

len(docs)
```

- 77

. . .

```{python}

len(pages)
```

- 22

## Inspect data

```{python}

print(docs[0].page_content[300:800])
```

- my name's  Andrew Ng and I'll be instru ctor for this class. And so 
I personally work in machine learning, and I' ve worked on it for about 15 years now, and 
I actually think that machine learning is th e most exciting field of all the computer 
sciences. So I'm actually always excited about  teaching this class. Sometimes I actually 
think that machine learning is not only the most exciting thin g in computer science, but 
the most exciting thing in all of human e ndeavor, so maybe a little b

# Split Notion data

## Load data

```{python}
loader = NotionDirectoryLoader("../docs/Notion_DB")
notion_db = loader.load()
```

## Define splitter

```{python}
text_splitter = CharacterTextSplitter(
    separator="\n",
    chunk_size=1000,
    chunk_overlap=150,
    length_function=len
)
```

## Split document

```{python}
docs = text_splitter.split_documents(notion_db)
```

## Inspect data

```{python}

len(notion_db)
```

- 1

. . .

```{python}


len(docs)
```

- 2


## Inspect data {smaller}

```{python}

print(docs[0].page_content)
```

```markdown
# Getting Started
👋 Welcome to Notion!
Here are the basics:
- [ ]  Click anywhere and just start typing
- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.
    
    [Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)
    
- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like
- [ ]  See the `⋮⋮` to the left of this checkbox on hover? Click and drag to move this line
- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page
- [ ]  Click `Templates` in your sidebar to get started with pre-built pages
- This is a toggle block. Click the little triangle to see more useful tips!
    - [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community

```

# Token splitting

## Basics

- We can also split on token count explicity, if we want

- This can be useful because LLMs often have context windows designated in tokens

- Tokens are often ~4 characters.


## TokenTextSplitter 1

```{python}
text_splitter = TokenTextSplitter(chunk_size=1, chunk_overlap=0)
```

. . .

```{python}
text1 = "foo bar bazzyfoo"
```

. . .

```{python}

text_splitter.split_text(text1)
```

- ['foo', ' bar', ' b', 'az', 'zy', 'foo']

## TokenTextSplitter 2 {.smaller}


```{python}
text_splitter = TokenTextSplitter(chunk_size=10, chunk_overlap=0)
```

. . .


```{python}
docs = text_splitter.split_documents(pages)
```

. . .

```{python}

docs[0]
```

- Document(page_content='MachineLearning-Lecture01  \n', metadata={'source': '../docs/cs229_lectures/MachineLearning-Lecture01.pdf', 'page': 0})

. . .

```{python}

pages[0].metadata
```

- {'source': '../docs/cs229_lectures/MachineLearning-Lecture01.pdf', 'page': 0}

# Context Aware Splitting with Markdown

## Basics

- Chunking aims to keep text with common context together.

- A text splitting often uses sentences or other delimiters to keep related text together but many documents (such as Markdown) have structure (headers) that can be explicitly used in splitting.

- We can use `MarkdownHeaderTextSplitter` to preserve header metadata in our chunks

## Markdown example

```{python}
markdown_document = """# Title\n\n \
## Chapter 1\n\n \
Hi this is Jim\n\n Hi this is Joe\n\n \
### Section \n\n \
Hi this is Lance \n\n 
## Chapter 2\n\n \
Hi this is Molly"""
```

## Headers to split on

```{python}
headers_to_split_on = [
    ("#", "Header 1"),
    ("##", "Header 2"),
    ("###", "Header 3"),
]
```

## MarkdownHeaderTextSplitter

```{python}
markdown_splitter = MarkdownHeaderTextSplitter(
    headers_to_split_on=headers_to_split_on
)
```

## Split text

```{python}
md_header_splits = markdown_splitter.split_text(markdown_document)
```

. . .


```{python}


md_header_splits[0]
```


- Document(page_content='Hi this is Jim  \nHi this is Joe', metadata={'Header 1': 'Title', 'Header 2': 'Chapter 1'})

. . .

```{python}


md_header_splits[1]
```

- Document(page_content='Hi this is Lance', metadata={'Header 1': 'Title', 'Header 2': 'Chapter 1', 'Header 3': 'Section'})

# Splitting Notion Markdown

## Load data


```{python}
loader = NotionDirectoryLoader("../docs/Notion_DB")
docs = loader.load()

```

## Join data {.smaller}

```{python}


txt = ' '.join([d.page_content for d in docs])
txt
```

- '# Getting Started\n\n👋 Welcome to Notion!\n\nHere are the basics:\n\n- [ ]  Click anywhere and just start typing\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.\n    \n    [Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)\n    \n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\n- [ ]  See the `⋮⋮` to the left of this checkbox on hover? Click and drag to move this line\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\n- This is a toggle block. Click the little triangle to see more useful tips!\n    - [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community\n    - [Help & Support](https://www.notion.so/e040febf70a94950b8620e6f00005004?pvs=21): ****Guides and FAQs for everything in Notion\n    - Stay organized with your sidebar and nested pages:\n        \n        ![Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif](Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif)\n        \n    \n\nSee it in action:\n\n[1 minute](https://youtu.be/TL_N2pmh9O0)\n\n1 minute\n\n[4 minutes](https://youtu.be/FXIrojSK3Jo)\n\n4 minutes\n\n[2 minutes](https://youtu.be/2Pwzff-uffU)\n\n2 minutes\n\n[2 minutes](https://youtu.be/O8qdvSxDYNY)\n\n2 minutes\n\nVisit our [YouTube channel](http://youtube.com/c/notion) to watch 50+ more tutorials\n\n👉**Have a question?** Click the `?` at the bottom right for more guides, or to send us a message.'

## Define Splitter

```{python}
headers_to_split_on = [
    ("#", "Header 1"),
    ("##", "Header 2"),
]
```

. . .

```{python}
markdown_splitter = MarkdownHeaderTextSplitter(
    headers_to_split_on=headers_to_split_on
)
```

## Split text

```{python}
md_header_splits = markdown_splitter.split_text(txt)
```

## Output {.smaller}

```{python}

md_header_splits[0]
```

- Document(page_content='👋 Welcome to Notion!  \nHere are the basics:  \n- [ ]  Click anywhere and just start typing\n- [ ]  Hit `/` to see all the types of content you can add - headers, videos, sub pages, etc.  \n[Example sub page](https://www.notion.so/Example-sub-page-92f63253929d456bbf12cd696e21e045?pvs=21)  \n- [ ]  Highlight any text, and use the menu that pops up to **style** *your* ~~writing~~ `however` [you](https://www.notion.so/product) like\n- [ ]  See the `⋮⋮` to the left of this checkbox on hover? Click and drag to move this line\n- [ ]  Click the `+ New Page` button at the bottom of your sidebar to add a new page\n- [ ]  Click `Templates` in your sidebar to get started with pre-built pages\n- This is a toggle block. Click the little triangle to see more useful tips!\n- [Template Gallery](https://www.notion.so/181e961aeb5c4ee6915307c0dfd5156d?pvs=21): More templates built by the Notion community\n- [Help & Support](https://www.notion.so/e040febf70a94950b8620e6f00005004?pvs=21): ****Guides and FAQs for everything in Notion\n- Stay organized with your sidebar and nested pages:  \n![Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif](Getting%20Started%2095e5ecbe48c44e408ef09fed850fbd40/infinitehierarchynodither.gif)  \nSee it in action:  \n[1 minute](https://youtu.be/TL_N2pmh9O0)  \n1 minute  \n[4 minutes](https://youtu.be/FXIrojSK3Jo)  \n4 minutes  \n[2 minutes](https://youtu.be/2Pwzff-uffU)  \n2 minutes  \n[2 minutes](https://youtu.be/O8qdvSxDYNY)  \n2 minutes  \nVisit our [YouTube channel](http://youtube.com/c/notion) to watch 50+ more tutorials  \n👉**Have a question?** Click the `?` at the bottom right for more guides, or to send us a message.', metadata={'Header 1': 'Getting Started'})

# Acknowledgments

- This tutorial is mainly based on the excellent course ["LangChain: Chat with Your DataI"](https://www.deeplearning.ai/short-courses/langchain-chat-with-your-data/) provided by Harrison Chase from LangChain and Andrew Ng from DeepLearning.AI.


# What's next? {background-image="../images/logo.png" background-opacity="0.5"}

**Congratulations! You have completed this tutorial** 👍


**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-langchain-intro/)**


